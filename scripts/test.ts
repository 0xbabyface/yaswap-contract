import { ethers } from "hardhat";

async function main() {

  const [owner] = await ethers.getSigners();

  const fibTrade = await ethers.deployContract("FibTrade");
  await fibTrade.waitForDeployment();

  const initData = fibTrade.interface.encodeFunctionData("initialize", [owner.address, owner.address, owner.address]);

  const fibProxy = await ethers.deployContract("FibTradeProxy", [fibTrade.target, initData, owner.address]);
  await fibProxy.waitForDeployment();

  let fib = await ethers.getContractAt("FibTrade", fibProxy.target);

  const enc = new TextEncoder();
  const inviteCode = enc.encode("123456aABbCc");

  await fib.connect(owner).swap({
    fromToken: "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
    toToken: "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063",
    fromTokenAmount: 1000000,
    dexAddress: "0xA748D6573acA135aF68F2635BE60CB80278bd855",
    dexCalldata: "0xb80c2f090000000000000000000000000000000000000000000000000000000000018775000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a06300000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000d2e00afb5a61fe700000000000000000000000000000000000000000000000000000000657c741c000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000460000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f65000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007a8f557916d99945eaf2f8763935a70bdc81f6500000000000000000000000000000000000000000000000000000000000000001800000000000000000002710254aa3a898071d6a2da0db11da73b02b4646078f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a06300000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000",
    approveAddress: "0x3B86917369B83a6892f553609F3c2F439C184e31",
    minOutAmount: 949697326088593383n,
    inviteCode,
    v: 27,
    r: "0x36daf9458853208158cfc7ae7afc29e7be52e3ea2a9b248167ba5976afb06fdf",
    s: "0x653f8dbde76c5abfd836c6e806601236f4aef42e8984b0e66a359ba272874f8d"
});
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
